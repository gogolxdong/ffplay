import macros

template MKTAG*(a, b, c, d: untyped): untyped =
  (a.int or (b.int shl 8) or (c.int shl 16) or (d.int shl 24))

template MKBETAG*(a, b, c, d: untyped): untyped =
  (d or (c shl 8) or (b shl 16) or (a shl 24))

template FFERRTAG*(a, b, c, d: untyped): untyped = (-cast[cint](MKTAG(a, b, c, d)))

macro AV_PIX_FMT_NE(be, le:untyped):untyped = ident "AV_PIX_FMT_" & le.strVal

template `+`*[T](p: ptr T, off: int): ptr T =
  cast[ptr type(p[])](cast[ByteAddress](p) +% off * sizeof(p[]))

template `+=`*[T](p: ptr T, off: int) =
  p = p + off

template `-`*[T](p: ptr T, off: int): ptr T =
  cast[ptr type(p[])](cast[ByteAddress](p) -% off * sizeof(p[]))

template `-=`*[T](p: ptr T, off: int) =
  p = p - off

template `[]`*[T](p: ptr T, off: int): T =
  (p + off)[]

template `[]=`*[T](p: ptr T, off: int, val: T) =
  (p + off)[] = val

type
  AVPixelFormat* = enum
    AV_PIX_FMT_NONE = -1, 
    AV_PIX_FMT_YUV420P, 
    AV_PIX_FMT_YUYV422,       
    AV_PIX_FMT_RGB24,         
    AV_PIX_FMT_BGR24,         
    AV_PIX_FMT_YUV422P,       
    AV_PIX_FMT_YUV444P,       
    AV_PIX_FMT_YUV410P,       
    AV_PIX_FMT_YUV411P,       
    AV_PIX_FMT_GRAY8,         
    AV_PIX_FMT_MONOWHITE,     
    AV_PIX_FMT_MONOBLACK,     
    AV_PIX_FMT_PAL8,          
    AV_PIX_FMT_YUVJ420P,      
    AV_PIX_FMT_YUVJ422P,      
    AV_PIX_FMT_YUVJ444P,      
    AV_PIX_FMT_UYVY422,       
    AV_PIX_FMT_UYYVYY411,     
    AV_PIX_FMT_BGR8,          
    AV_PIX_FMT_BGR4,          
    AV_PIX_FMT_BGR4_BYTE,     
    AV_PIX_FMT_RGB8,         
    AV_PIX_FMT_RGB4,          
    AV_PIX_FMT_RGB4_BYTE,     
    AV_PIX_FMT_NV12,          
    AV_PIX_FMT_NV21,          
    AV_PIX_FMT_ARGB,         
    AV_PIX_FMT_RGBA,          
    AV_PIX_FMT_ABGR,          
    AV_PIX_FMT_BGRA,          
    AV_PIX_FMT_GRAY16BE,      
    AV_PIX_FMT_GRAY16LE,      
    AV_PIX_FMT_YUV440P,       
    AV_PIX_FMT_YUVJ440P,      
    AV_PIX_FMT_YUVA420P,      
    AV_PIX_FMT_RGB48BE,      
    AV_PIX_FMT_RGB48LE,       
    AV_PIX_FMT_RGB565BE,      
    AV_PIX_FMT_RGB565LE,      
    AV_PIX_FMT_RGB555BE,      
    AV_PIX_FMT_RGB555LE,      
    AV_PIX_FMT_BGR565BE,      
    AV_PIX_FMT_BGR565LE,      
    AV_PIX_FMT_BGR555BE,     
    AV_PIX_FMT_BGR555LE, 
    AV_PIX_FMT_VAAPI_MOCO,    
    AV_PIX_FMT_VAAPI_IDCT,    
    AV_PIX_FMT_VAAPI_VLD,     
    AV_PIX_FMT_VAAPI,         
    AV_PIX_FMT_YUV420P16LE,   
    AV_PIX_FMT_YUV420P16BE,   
    AV_PIX_FMT_YUV422P16LE,   
    AV_PIX_FMT_YUV422P16BE,   
    AV_PIX_FMT_YUV444P16LE,   
    AV_PIX_FMT_YUV444P16BE,   
    AV_PIX_FMT_DXVA2_VLD,     
    AV_PIX_FMT_RGB444LE,      
    AV_PIX_FMT_RGB444BE,      
    AV_PIX_FMT_BGR444LE,      
    AV_PIX_FMT_BGR444BE,      
    AV_PIX_FMT_YA8,           
    AV_PIX_FMT_BGR48BE,       
    AV_PIX_FMT_BGR48LE,       
    AV_PIX_FMT_YUV420P9BE,    
    AV_PIX_FMT_YUV420P9LE,    
    AV_PIX_FMT_YUV420P10BE,   
    AV_PIX_FMT_YUV420P10LE,   
    AV_PIX_FMT_YUV422P10BE,   
    AV_PIX_FMT_YUV422P10LE,   
    AV_PIX_FMT_YUV444P9BE,    
    AV_PIX_FMT_YUV444P9LE,    
    AV_PIX_FMT_YUV444P10BE,   
    AV_PIX_FMT_YUV444P10LE,   
    AV_PIX_FMT_YUV422P9BE,    
    AV_PIX_FMT_YUV422P9LE,    
    AV_PIX_FMT_GBRP,          
    AV_PIX_FMT_GBRP9BE,       
    AV_PIX_FMT_GBRP9LE,       
    AV_PIX_FMT_GBRP10BE,      
    AV_PIX_FMT_GBRP10LE,      
    AV_PIX_FMT_GBRP16BE,      
    AV_PIX_FMT_GBRP16LE,      
    AV_PIX_FMT_YUVA422P,      
    AV_PIX_FMT_YUVA444P,      
    AV_PIX_FMT_YUVA420P9BE,   
    AV_PIX_FMT_YUVA420P9LE,   
    AV_PIX_FMT_YUVA422P9BE,   
    AV_PIX_FMT_YUVA422P9LE,   
    AV_PIX_FMT_YUVA444P9BE,   
    AV_PIX_FMT_YUVA444P9LE,   
    AV_PIX_FMT_YUVA420P10BE,  
    AV_PIX_FMT_YUVA420P10LE,  
    AV_PIX_FMT_YUVA422P10BE,  
    AV_PIX_FMT_YUVA422P10LE,  
    AV_PIX_FMT_YUVA444P10BE,  
    AV_PIX_FMT_YUVA444P10LE,  
    AV_PIX_FMT_YUVA420P16BE,  
    AV_PIX_FMT_YUVA420P16LE,  
    AV_PIX_FMT_YUVA422P16BE,  
    AV_PIX_FMT_YUVA422P16LE,  
    AV_PIX_FMT_YUVA444P16BE,  
    AV_PIX_FMT_YUVA444P16LE,  
    AV_PIX_FMT_VDPAU,         
    AV_PIX_FMT_XYZ12LE,       
    AV_PIX_FMT_XYZ12BE,       
    AV_PIX_FMT_NV16,          
    AV_PIX_FMT_NV20LE,        
    AV_PIX_FMT_NV20BE,        
    AV_PIX_FMT_RGBA64BE,      
    AV_PIX_FMT_RGBA64LE,      
    AV_PIX_FMT_BGRA64BE,      
    AV_PIX_FMT_BGRA64LE,      
    AV_PIX_FMT_YVYU422,       
    AV_PIX_FMT_YA16BE,        
    AV_PIX_FMT_YA16LE,        
    AV_PIX_FMT_GBRAP,         
    AV_PIX_FMT_GBRAP16BE,     
    AV_PIX_FMT_GBRAP16LE,     
    AV_PIX_FMT_QSV,
    AV_PIX_FMT_MMAL, 
    AV_PIX_FMT_D3D11VA_VLD, 
    AV_PIX_FMT_CUDA, 
    AV_PIX_FMT_0RGB, 
    AV_PIX_FMT_RGB0,          
    AV_PIX_FMT_0BGR,          
    AV_PIX_FMT_BGR0,          
    AV_PIX_FMT_YUV420P12BE,   
    AV_PIX_FMT_YUV420P12LE,   
    AV_PIX_FMT_YUV420P14BE,   
    AV_PIX_FMT_YUV420P14LE,   
    AV_PIX_FMT_YUV422P12BE,   
    AV_PIX_FMT_YUV422P12LE,   
    AV_PIX_FMT_YUV422P14BE,   
    AV_PIX_FMT_YUV422P14LE,   
    AV_PIX_FMT_YUV444P12BE,   
    AV_PIX_FMT_YUV444P12LE,   
    AV_PIX_FMT_YUV444P14BE,   
    AV_PIX_FMT_YUV444P14LE,   
    AV_PIX_FMT_GBRP12BE,      
    AV_PIX_FMT_GBRP12LE,      
    AV_PIX_FMT_GBRP14BE,      
    AV_PIX_FMT_GBRP14LE,      
    AV_PIX_FMT_YUVJ411P,      
    AV_PIX_FMT_BAYER_BGGR8,   
    AV_PIX_FMT_BAYER_RGGB8,   
    AV_PIX_FMT_BAYER_GBRG8,   
    AV_PIX_FMT_BAYER_GRBG8,   
    AV_PIX_FMT_BAYER_BGGR16LE, 
    AV_PIX_FMT_BAYER_BGGR16BE, 
    AV_PIX_FMT_BAYER_RGGB16LE, 
    AV_PIX_FMT_BAYER_RGGB16BE, 
    AV_PIX_FMT_BAYER_GBRG16LE, 
    AV_PIX_FMT_BAYER_GBRG16BE, 
    AV_PIX_FMT_BAYER_GRBG16LE, 
    AV_PIX_FMT_BAYER_GRBG16BE, 
    AV_PIX_FMT_XVMC,          
    AV_PIX_FMT_YUV440P10LE,   
    AV_PIX_FMT_YUV440P10BE,   
    AV_PIX_FMT_YUV440P12LE,   
    AV_PIX_FMT_YUV440P12BE,   
    AV_PIX_FMT_AYUV64LE,      
    AV_PIX_FMT_AYUV64BE,      
    AV_PIX_FMT_VIDEOTOOLBOX,  
    AV_PIX_FMT_P010LE,        
    AV_PIX_FMT_P010BE,        
    AV_PIX_FMT_GBRAP12BE,     
    AV_PIX_FMT_GBRAP12LE,     
    AV_PIX_FMT_GBRAP10BE,     
    AV_PIX_FMT_GBRAP10LE,     
    AV_PIX_FMT_MEDIACODEC,    
    AV_PIX_FMT_GRAY12BE,      
    AV_PIX_FMT_GRAY12LE,      
    AV_PIX_FMT_GRAY10BE,      
    AV_PIX_FMT_GRAY10LE,      
    AV_PIX_FMT_P016LE,        
    AV_PIX_FMT_P016BE,        
    AV_PIX_FMT_D3D11, AV_PIX_FMT_GRAY9BE, 
    AV_PIX_FMT_GRAY9LE,       
    AV_PIX_FMT_GBRPF32BE,     
    AV_PIX_FMT_GBRPF32LE,     
    AV_PIX_FMT_GBRAPF32BE,    
    AV_PIX_FMT_GBRAPF32LE,    
    AV_PIX_FMT_DRM_PRIME, AV_PIX_FMT_OPENCL, AV_PIX_FMT_GRAY14BE, 
    AV_PIX_FMT_GRAY14LE,      
    AV_PIX_FMT_GRAYF32BE,     
    AV_PIX_FMT_GRAYF32LE,     
    AV_PIX_FMT_YUVA422P12BE,  
    AV_PIX_FMT_YUVA422P12LE,  
    AV_PIX_FMT_YUVA444P12BE,  
    AV_PIX_FMT_YUVA444P12LE,  
    AV_PIX_FMT_NV24,          
    AV_PIX_FMT_NV42,          
    AV_PIX_FMT_VULKAN, AV_PIX_FMT_Y210BE, 
    AV_PIX_FMT_Y210LE,        
    AV_PIX_FMT_X2RGB10LE,     
    AV_PIX_FMT_X2RGB10BE,     
    AV_PIX_FMT_NB
  AVCodecID* = enum
    AV_CODEC_ID_NONE,         
    AV_CODEC_ID_MPEG1VIDEO, AV_CODEC_ID_MPEG2VIDEO, 
    AV_CODEC_ID_H261, AV_CODEC_ID_H263, AV_CODEC_ID_RV10, AV_CODEC_ID_RV20,
    AV_CODEC_ID_MJPEG, AV_CODEC_ID_MJPEGB, AV_CODEC_ID_LJPEG, AV_CODEC_ID_SP5X,
    AV_CODEC_ID_JPEGLS, AV_CODEC_ID_MPEG4, AV_CODEC_ID_RAWVIDEO,
    AV_CODEC_ID_MSMPEG4V1, AV_CODEC_ID_MSMPEG4V2, AV_CODEC_ID_MSMPEG4V3,
    AV_CODEC_ID_WMV1, AV_CODEC_ID_WMV2, AV_CODEC_ID_H263P, AV_CODEC_ID_H263I,
    AV_CODEC_ID_FLV1, AV_CODEC_ID_SVQ1, AV_CODEC_ID_SVQ3, AV_CODEC_ID_DVVIDEO,
    AV_CODEC_ID_HUFFYUV, AV_CODEC_ID_CYUV, AV_CODEC_ID_H264, AV_CODEC_ID_INDEO3,
    AV_CODEC_ID_VP3, AV_CODEC_ID_THEORA, AV_CODEC_ID_ASV1, AV_CODEC_ID_ASV2,
    AV_CODEC_ID_FFV1, AV_CODEC_ID_4XM, AV_CODEC_ID_VCR1, AV_CODEC_ID_CLJR,
    AV_CODEC_ID_MDEC, AV_CODEC_ID_ROQ, AV_CODEC_ID_INTERPLAY_VIDEO,
    AV_CODEC_ID_XAN_WC3, AV_CODEC_ID_XAN_WC4, AV_CODEC_ID_RPZA,
    AV_CODEC_ID_CINEPAK, AV_CODEC_ID_WS_VQA, AV_CODEC_ID_MSRLE,
    AV_CODEC_ID_MSVIDEO1, AV_CODEC_ID_IDCIN, AV_CODEC_ID_8BPS, AV_CODEC_ID_SMC,
    AV_CODEC_ID_FLIC, AV_CODEC_ID_TRUEMOTION1, AV_CODEC_ID_VMDVIDEO,
    AV_CODEC_ID_MSZH, AV_CODEC_ID_ZLIB, AV_CODEC_ID_QTRLE, AV_CODEC_ID_TSCC,
    AV_CODEC_ID_ULTI, AV_CODEC_ID_QDRAW, AV_CODEC_ID_VIXL, AV_CODEC_ID_QPEG,
    AV_CODEC_ID_PNG, AV_CODEC_ID_PPM, AV_CODEC_ID_PBM, AV_CODEC_ID_PGM,
    AV_CODEC_ID_PGMYUV, AV_CODEC_ID_PAM, AV_CODEC_ID_FFVHUFF, AV_CODEC_ID_RV30,
    AV_CODEC_ID_RV40, AV_CODEC_ID_VC1, AV_CODEC_ID_WMV3, AV_CODEC_ID_LOCO,
    AV_CODEC_ID_WNV1, AV_CODEC_ID_AASC, AV_CODEC_ID_INDEO2, AV_CODEC_ID_FRAPS,
    AV_CODEC_ID_TRUEMOTION2, AV_CODEC_ID_BMP, AV_CODEC_ID_CSCD,
    AV_CODEC_ID_MMVIDEO, AV_CODEC_ID_ZMBV, AV_CODEC_ID_AVS, AV_CODEC_ID_SMACKVIDEO,
    AV_CODEC_ID_NUV, AV_CODEC_ID_KMVC, AV_CODEC_ID_FLASHSV, AV_CODEC_ID_CAVS,
    AV_CODEC_ID_JPEG2000, AV_CODEC_ID_VMNC, AV_CODEC_ID_VP5, AV_CODEC_ID_VP6,
    AV_CODEC_ID_VP6F, AV_CODEC_ID_TARGA, AV_CODEC_ID_DSICINVIDEO,
    AV_CODEC_ID_TIERTEXSEQVIDEO, AV_CODEC_ID_TIFF, AV_CODEC_ID_GIF,
    AV_CODEC_ID_DXA, AV_CODEC_ID_DNXHD, AV_CODEC_ID_THP, AV_CODEC_ID_SGI,
    AV_CODEC_ID_C93, AV_CODEC_ID_BETHSOFTVID, AV_CODEC_ID_PTX, AV_CODEC_ID_TXD,
    AV_CODEC_ID_VP6A, AV_CODEC_ID_AMV, AV_CODEC_ID_VB, AV_CODEC_ID_PCX,
    AV_CODEC_ID_SUNRAST, AV_CODEC_ID_INDEO4, AV_CODEC_ID_INDEO5, AV_CODEC_ID_MIMIC,
    AV_CODEC_ID_RL2, AV_CODEC_ID_ESCAPE124, AV_CODEC_ID_DIRAC, AV_CODEC_ID_BFI,
    AV_CODEC_ID_CMV, AV_CODEC_ID_MOTIONPIXELS, AV_CODEC_ID_TGV, AV_CODEC_ID_TGQ,
    AV_CODEC_ID_TQI, AV_CODEC_ID_AURA, AV_CODEC_ID_AURA2, AV_CODEC_ID_V210X,
    AV_CODEC_ID_TMV, AV_CODEC_ID_V210, AV_CODEC_ID_DPX, AV_CODEC_ID_MAD,
    AV_CODEC_ID_FRWU, AV_CODEC_ID_FLASHSV2, AV_CODEC_ID_CDGRAPHICS,
    AV_CODEC_ID_R210, AV_CODEC_ID_ANM, AV_CODEC_ID_BINKVIDEO, AV_CODEC_ID_IFF_ILBM,
    AV_CODEC_ID_KGV1, AV_CODEC_ID_YOP, AV_CODEC_ID_VP8, AV_CODEC_ID_PICTOR,
    AV_CODEC_ID_ANSI, AV_CODEC_ID_A64_MULTI, AV_CODEC_ID_A64_MULTI5,
    AV_CODEC_ID_R10K, AV_CODEC_ID_MXPEG, AV_CODEC_ID_LAGARITH, AV_CODEC_ID_PRORES,
    AV_CODEC_ID_JV, AV_CODEC_ID_DFA, AV_CODEC_ID_WMV3IMAGE, AV_CODEC_ID_VC1IMAGE,
    AV_CODEC_ID_UTVIDEO, AV_CODEC_ID_BMV_VIDEO, AV_CODEC_ID_VBLE,
    AV_CODEC_ID_DXTORY, AV_CODEC_ID_V410, AV_CODEC_ID_XWD, AV_CODEC_ID_CDXL,
    AV_CODEC_ID_XBM, AV_CODEC_ID_ZEROCODEC, AV_CODEC_ID_MSS1, AV_CODEC_ID_MSA1,
    AV_CODEC_ID_TSCC2, AV_CODEC_ID_MTS2, AV_CODEC_ID_CLLC, AV_CODEC_ID_MSS2,
    AV_CODEC_ID_VP9, AV_CODEC_ID_AIC, AV_CODEC_ID_ESCAPE130, AV_CODEC_ID_G2M,
    AV_CODEC_ID_WEBP, AV_CODEC_ID_HNM4_VIDEO, AV_CODEC_ID_HEVC, AV_CODEC_ID_FIC,
    AV_CODEC_ID_ALIAS_PIX, AV_CODEC_ID_BRENDER_PIX, AV_CODEC_ID_PAF_VIDEO,
    AV_CODEC_ID_EXR, AV_CODEC_ID_VP7, AV_CODEC_ID_SANM, AV_CODEC_ID_SGIRLE,
    AV_CODEC_ID_MVC1, AV_CODEC_ID_MVC2, AV_CODEC_ID_HQX, AV_CODEC_ID_TDSC,
    AV_CODEC_ID_HQ_HQA, AV_CODEC_ID_HAP, AV_CODEC_ID_DDS, AV_CODEC_ID_DXV,
    AV_CODEC_ID_SCREENPRESSO, AV_CODEC_ID_RSCC, AV_CODEC_ID_AVS2, AV_CODEC_ID_PGX,
    AV_CODEC_ID_AVS3, AV_CODEC_ID_Y41P = 0x00008000, AV_CODEC_ID_AVRP,
    AV_CODEC_ID_012V, AV_CODEC_ID_AVUI, AV_CODEC_ID_AYUV, AV_CODEC_ID_TARGA_Y216,
    AV_CODEC_ID_V308, AV_CODEC_ID_V408, AV_CODEC_ID_YUV4, AV_CODEC_ID_AVRN,
    AV_CODEC_ID_CPIA, AV_CODEC_ID_XFACE, AV_CODEC_ID_SNOW, AV_CODEC_ID_SMVJPEG,
    AV_CODEC_ID_APNG, AV_CODEC_ID_DAALA, AV_CODEC_ID_CFHD,
    AV_CODEC_ID_TRUEMOTION2RT, AV_CODEC_ID_M101, AV_CODEC_ID_MAGICYUV,
    AV_CODEC_ID_SHEERVIDEO, AV_CODEC_ID_YLC, AV_CODEC_ID_PSD, AV_CODEC_ID_PIXLET,
    AV_CODEC_ID_SPEEDHQ, AV_CODEC_ID_FMVC, AV_CODEC_ID_SCPR,
    AV_CODEC_ID_CLEARVIDEO, AV_CODEC_ID_XPM, AV_CODEC_ID_AV1,
    AV_CODEC_ID_BITPACKED, AV_CODEC_ID_MSCC, AV_CODEC_ID_SRGC, AV_CODEC_ID_SVG,
    AV_CODEC_ID_GDV, AV_CODEC_ID_FITS, AV_CODEC_ID_IMM4, AV_CODEC_ID_PROSUMER,
    AV_CODEC_ID_MWSC, AV_CODEC_ID_WCMV, AV_CODEC_ID_RASC, AV_CODEC_ID_HYMT,
    AV_CODEC_ID_ARBC, AV_CODEC_ID_AGM, AV_CODEC_ID_LSCR, AV_CODEC_ID_VP4,
    AV_CODEC_ID_IMM5, AV_CODEC_ID_MVDV, AV_CODEC_ID_MVHA, AV_CODEC_ID_CDTOONS,
    AV_CODEC_ID_MV30, AV_CODEC_ID_NOTCHLC, AV_CODEC_ID_PFM, AV_CODEC_ID_MOBICLIP,
    AV_CODEC_ID_PHOTOCD, AV_CODEC_ID_IPU, AV_CODEC_ID_ARGO, AV_CODEC_ID_CRI, 
    AV_CODEC_ID_FIRST_AUDIO = 0x00010000, 
    AV_CODEC_ID_PCM_S16BE, AV_CODEC_ID_PCM_U16LE, AV_CODEC_ID_PCM_U16BE,
    AV_CODEC_ID_PCM_S8, AV_CODEC_ID_PCM_U8, AV_CODEC_ID_PCM_MULAW,
    AV_CODEC_ID_PCM_ALAW, AV_CODEC_ID_PCM_S32LE, AV_CODEC_ID_PCM_S32BE,
    AV_CODEC_ID_PCM_U32LE, AV_CODEC_ID_PCM_U32BE, AV_CODEC_ID_PCM_S24LE,
    AV_CODEC_ID_PCM_S24BE, AV_CODEC_ID_PCM_U24LE, AV_CODEC_ID_PCM_U24BE,
    AV_CODEC_ID_PCM_S24DAUD, AV_CODEC_ID_PCM_ZORK, AV_CODEC_ID_PCM_S16LE_PLANAR,
    AV_CODEC_ID_PCM_DVD, AV_CODEC_ID_PCM_F32BE, AV_CODEC_ID_PCM_F32LE,
    AV_CODEC_ID_PCM_F64BE, AV_CODEC_ID_PCM_F64LE, AV_CODEC_ID_PCM_BLURAY,
    AV_CODEC_ID_PCM_LXF, AV_CODEC_ID_S302M, AV_CODEC_ID_PCM_S8_PLANAR,
    AV_CODEC_ID_PCM_S24LE_PLANAR, AV_CODEC_ID_PCM_S32LE_PLANAR,
    AV_CODEC_ID_PCM_S16BE_PLANAR, AV_CODEC_ID_PCM_S64LE = 0x00010800,
    AV_CODEC_ID_PCM_S64BE, AV_CODEC_ID_PCM_F16LE, AV_CODEC_ID_PCM_F24LE, AV_CODEC_ID_PCM_VIDC, 
    AV_CODEC_ID_ADPCM_IMA_QT = 0x00011000, AV_CODEC_ID_ADPCM_IMA_WAV,
    AV_CODEC_ID_ADPCM_IMA_DK3, AV_CODEC_ID_ADPCM_IMA_DK4,
    AV_CODEC_ID_ADPCM_IMA_WS, AV_CODEC_ID_ADPCM_IMA_SMJPEG, AV_CODEC_ID_ADPCM_MS,
    AV_CODEC_ID_ADPCM_4XM, AV_CODEC_ID_ADPCM_XA, AV_CODEC_ID_ADPCM_ADX,
    AV_CODEC_ID_ADPCM_EA, AV_CODEC_ID_ADPCM_G726, AV_CODEC_ID_ADPCM_CT,
    AV_CODEC_ID_ADPCM_SWF, AV_CODEC_ID_ADPCM_YAMAHA, AV_CODEC_ID_ADPCM_SBPRO_4,
    AV_CODEC_ID_ADPCM_SBPRO_3, AV_CODEC_ID_ADPCM_SBPRO_2, AV_CODEC_ID_ADPCM_THP,
    AV_CODEC_ID_ADPCM_IMA_AMV, AV_CODEC_ID_ADPCM_EA_R1, AV_CODEC_ID_ADPCM_EA_R3,
    AV_CODEC_ID_ADPCM_EA_R2, AV_CODEC_ID_ADPCM_IMA_EA_SEAD,
    AV_CODEC_ID_ADPCM_IMA_EA_EACS, AV_CODEC_ID_ADPCM_EA_XAS,
    AV_CODEC_ID_ADPCM_EA_MAXIS_XA, AV_CODEC_ID_ADPCM_IMA_ISS,
    AV_CODEC_ID_ADPCM_G722, AV_CODEC_ID_ADPCM_IMA_APC, AV_CODEC_ID_ADPCM_VIMA,
    AV_CODEC_ID_ADPCM_AFC = 0x00011800, AV_CODEC_ID_ADPCM_IMA_OKI,
    AV_CODEC_ID_ADPCM_DTK, AV_CODEC_ID_ADPCM_IMA_RAD, AV_CODEC_ID_ADPCM_G726LE,
    AV_CODEC_ID_ADPCM_THP_LE, AV_CODEC_ID_ADPCM_PSX, AV_CODEC_ID_ADPCM_AICA,
    AV_CODEC_ID_ADPCM_IMA_DAT4, AV_CODEC_ID_ADPCM_MTAF, AV_CODEC_ID_ADPCM_AGM,
    AV_CODEC_ID_ADPCM_ARGO, AV_CODEC_ID_ADPCM_IMA_SSI, AV_CODEC_ID_ADPCM_ZORK,
    AV_CODEC_ID_ADPCM_IMA_APM, AV_CODEC_ID_ADPCM_IMA_ALP,
    AV_CODEC_ID_ADPCM_IMA_MTF, AV_CODEC_ID_ADPCM_IMA_CUNNING, AV_CODEC_ID_ADPCM_IMA_MOFLEX, 
    AV_CODEC_ID_AMR_NB = 0x00012000, AV_CODEC_ID_AMR_WB,
    AV_CODEC_ID_RA_144 = 0x00013000, AV_CODEC_ID_RA_288, 
    AV_CODEC_ID_ROQ_DPCM = 0x00014000, AV_CODEC_ID_INTERPLAY_DPCM,
    AV_CODEC_ID_XAN_DPCM, AV_CODEC_ID_SOL_DPCM,
    AV_CODEC_ID_SDX2_DPCM = 0x00014800, AV_CODEC_ID_GREMLIN_DPCM, AV_CODEC_ID_DERF_DPCM, 
    AV_CODEC_ID_MP2 = 0x00015000, AV_CODEC_ID_MP3,
    AV_CODEC_ID_AAC, AV_CODEC_ID_AC3, AV_CODEC_ID_DTS, AV_CODEC_ID_VORBIS,
    AV_CODEC_ID_DVAUDIO, AV_CODEC_ID_WMAV1, AV_CODEC_ID_WMAV2, AV_CODEC_ID_MACE3,
    AV_CODEC_ID_MACE6, AV_CODEC_ID_VMDAUDIO, AV_CODEC_ID_FLAC, AV_CODEC_ID_MP3ADU,
    AV_CODEC_ID_MP3ON4, AV_CODEC_ID_SHORTEN, AV_CODEC_ID_ALAC,
    AV_CODEC_ID_WESTWOOD_SND1, AV_CODEC_ID_GSM, 
    AV_CODEC_ID_QDM2, AV_CODEC_ID_COOK, AV_CODEC_ID_TRUESPEECH, AV_CODEC_ID_TTA,
    AV_CODEC_ID_SMACKAUDIO, AV_CODEC_ID_QCELP, AV_CODEC_ID_WAVPACK,
    AV_CODEC_ID_DSICINAUDIO, AV_CODEC_ID_IMC, AV_CODEC_ID_MUSEPACK7,
    AV_CODEC_ID_MLP, AV_CODEC_ID_GSM_MS, 
    AV_CODEC_ID_ATRAC3, AV_CODEC_ID_APE, AV_CODEC_ID_NELLYMOSER,
    AV_CODEC_ID_MUSEPACK8, AV_CODEC_ID_SPEEX, AV_CODEC_ID_WMAVOICE,
    AV_CODEC_ID_WMAPRO, AV_CODEC_ID_WMALOSSLESS, AV_CODEC_ID_ATRAC3P,
    AV_CODEC_ID_EAC3, AV_CODEC_ID_SIPR, AV_CODEC_ID_MP1, AV_CODEC_ID_TWINVQ,
    AV_CODEC_ID_TRUEHD, AV_CODEC_ID_MP4ALS, AV_CODEC_ID_ATRAC1,
    AV_CODEC_ID_BINKAUDIO_RDFT, AV_CODEC_ID_BINKAUDIO_DCT, AV_CODEC_ID_AAC_LATM,
    AV_CODEC_ID_QDMC, AV_CODEC_ID_CELT, AV_CODEC_ID_G723_1, AV_CODEC_ID_G729,
    AV_CODEC_ID_8SVX_EXP, AV_CODEC_ID_8SVX_FIB, AV_CODEC_ID_BMV_AUDIO,
    AV_CODEC_ID_RALF, AV_CODEC_ID_IAC, AV_CODEC_ID_ILBC, AV_CODEC_ID_OPUS,
    AV_CODEC_ID_COMFORT_NOISE, AV_CODEC_ID_TAK, AV_CODEC_ID_METASOUND,
    AV_CODEC_ID_PAF_AUDIO, AV_CODEC_ID_ON2AVC, AV_CODEC_ID_DSS_SP,
    AV_CODEC_ID_CODEC2, AV_CODEC_ID_FFWAVESYNTH = 0x00015800, AV_CODEC_ID_SONIC,
    AV_CODEC_ID_SONIC_LS, AV_CODEC_ID_EVRC, AV_CODEC_ID_SMV, AV_CODEC_ID_DSD_LSBF,
    AV_CODEC_ID_DSD_MSBF, AV_CODEC_ID_DSD_LSBF_PLANAR,
    AV_CODEC_ID_DSD_MSBF_PLANAR, AV_CODEC_ID_4GV, AV_CODEC_ID_INTERPLAY_ACM,
    AV_CODEC_ID_XMA1, AV_CODEC_ID_XMA2, AV_CODEC_ID_DST, AV_CODEC_ID_ATRAC3AL,
    AV_CODEC_ID_ATRAC3PAL, AV_CODEC_ID_DOLBY_E, AV_CODEC_ID_APTX,
    AV_CODEC_ID_APTX_HD, AV_CODEC_ID_SBC, AV_CODEC_ID_ATRAC9, AV_CODEC_ID_HCOM,
    AV_CODEC_ID_ACELP_KELVIN, AV_CODEC_ID_MPEGH_3D_AUDIO, AV_CODEC_ID_SIREN,
    AV_CODEC_ID_HCA, AV_CODEC_ID_FASTAUDIO, 
    AV_CODEC_ID_FIRST_SUBTITLE = 0x00017000, 
    AV_CODEC_ID_DVB_SUBTITLE, AV_CODEC_ID_TEXT, 
    AV_CODEC_ID_XSUB, AV_CODEC_ID_SSA, AV_CODEC_ID_MOV_TEXT,
    AV_CODEC_ID_HDMV_PGS_SUBTITLE, AV_CODEC_ID_DVB_TELETEXT, AV_CODEC_ID_SRT,
    AV_CODEC_ID_MICRODVD = 0x00017800, AV_CODEC_ID_EIA_608, AV_CODEC_ID_JACOSUB,
    AV_CODEC_ID_SAMI, AV_CODEC_ID_REALTEXT, AV_CODEC_ID_STL,
    AV_CODEC_ID_SUBVIEWER1, AV_CODEC_ID_SUBVIEWER, AV_CODEC_ID_SUBRIP,
    AV_CODEC_ID_WEBVTT, AV_CODEC_ID_MPL2, AV_CODEC_ID_VPLAYER, AV_CODEC_ID_PJS,
    AV_CODEC_ID_ASS, AV_CODEC_ID_HDMV_TEXT_SUBTITLE, AV_CODEC_ID_TTML, AV_CODEC_ID_ARIB_CAPTION, 
    AV_CODEC_ID_FIRST_UNKNOWN = 0x00018000, 
    AV_CODEC_ID_SCTE_35,      
    AV_CODEC_ID_EPG, AV_CODEC_ID_BINTEXT = 0x00018800, AV_CODEC_ID_XBIN,
    AV_CODEC_ID_IDF, AV_CODEC_ID_OTF, AV_CODEC_ID_SMPTE_KLV, AV_CODEC_ID_DVD_NAV,
    AV_CODEC_ID_TIMED_ID3, AV_CODEC_ID_BIN_DATA, AV_CODEC_ID_PROBE = 0x00019000, 
    AV_CODEC_ID_MPEG2TS = 0x00020000, 
    AV_CODEC_ID_MPEG4SYSTEMS = 0x00020001, 
    AV_CODEC_ID_FFMETADATA = 0x00021000, 
    AV_CODEC_ID_WRAPPED_AVFRAME = 0x00021001 
  AVColorSpace* = enum
    AVCOL_SPC_RGB = 0,          
    AVCOL_SPC_BT709 = 1,        
    AVCOL_SPC_UNSPECIFIED = 2, 
    AVCOL_SPC_RESERVED = 3, 
    AVCOL_SPC_FCC = 4, 
    AVCOL_SPC_BT470BG = 5,     
    AVCOL_SPC_SMPTE170M = 6,    
    AVCOL_SPC_SMPTE240M = 7,   
    AVCOL_SPC_YCGCO = 8,        
    AVCOL_SPC_BT2020_NCL = 9,   
    AVCOL_SPC_BT2020_CL = 10,   
    AVCOL_SPC_SMPTE2085 = 11,   
    AVCOL_SPC_CHROMA_DERIVED_NCL = 12, 
    AVCOL_SPC_CHROMA_DERIVED_CL = 13, 
    AVCOL_SPC_ICTCP = 14,       
    AVCOL_SPC_NB 
  AVColorPrimaries* = enum
    AVCOL_PRI_RESERVED0 = 0, AVCOL_PRI_BT709 = 1, 
    AVCOL_PRI_UNSPECIFIED = 2, AVCOL_PRI_RESERVED = 3, AVCOL_PRI_BT470M = 4, 
    AVCOL_PRI_BT470BG = 5,      
    AVCOL_PRI_SMPTE170M = 6,    
    AVCOL_PRI_SMPTE240M = 7,    
    AVCOL_PRI_FILM = 8,         
    AVCOL_PRI_BT2020 = 9,       
    AVCOL_PRI_SMPTE428 = 10,    
    AVCOL_PRI_SMPTE431 = 11,    
    AVCOL_PRI_SMPTE432 = 12,    
    AVCOL_PRI_EBU3213 = 22,     
    AVCOL_PRI_NB
  AVColorTransferCharacteristic* = enum
    AVCOL_TRC_RESERVED0 = 0, AVCOL_TRC_BT709 = 1, 
    AVCOL_TRC_UNSPECIFIED = 2, AVCOL_TRC_RESERVED = 3, AVCOL_TRC_GAMMA22 = 4, 
    AVCOL_TRC_GAMMA28 = 5,      
    AVCOL_TRC_SMPTE170M = 6,    
    AVCOL_TRC_SMPTE240M = 7, AVCOL_TRC_LINEAR = 8, 
    AVCOL_TRC_LOG = 9,          
    AVCOL_TRC_LOG_SQRT = 10,    
    AVCOL_TRC_IEC61966_2_4 = 11, 
    AVCOL_TRC_BT1361_ECG = 12,  
    AVCOL_TRC_IEC61966_2_1 = 13, 
    AVCOL_TRC_BT2020_10 = 14,   
    AVCOL_TRC_BT2020_12 = 15,   
    AVCOL_TRC_SMPTE2084 = 16,   
    AVCOL_TRC_SMPTE428 = 17,    
    AVCOL_TRC_ARIB_STD_B67 = 18, 
    AVCOL_TRC_NB    
  AVExprType* = enum
    e_value, e_const, e_func0, e_func1, e_func2, e_squish, e_gauss, e_ld, e_isnan,
    e_isinf, e_mod, e_max, e_min, e_eq, e_gt, e_gte, e_lte, e_lt, e_pow, e_mul, e_div,
    e_add, e_last, e_st, e_while, e_taylor, e_root, e_floor, e_ceil, e_trunc, e_round,
    e_sqrt, e_not, e_random, e_hypot, e_gcd, e_if, e_ifnot, e_print, e_bitand, e_bitor,
    e_between, e_clip, e_atan2, e_lerp, e_sgn          
  nal_unit_type_e* = enum
    NAL_UNKNOWN = 0, NAL_SLICE = 1, NAL_SLICE_DPA = 2, NAL_SLICE_DPB = 3, NAL_SLICE_DPC = 4, NAL_SLICE_IDR = 5, 
    NAL_SEI = 6,                
    NAL_SPS = 7, NAL_PPS = 8, NAL_AUD = 9, NAL_FILLER = 12 
  nal_priority_e* = enum
    NAL_PRIORITY_DISPOSABLE = 0, NAL_PRIORITY_LOW = 1, NAL_PRIORITY_HIGH = 2,
    NAL_PRIORITY_HIGHEST = 3

const  x264_profile_names*: seq[string] = @["baseline", "main", "high","high10", "high422", "high444"]
 

const
  AV_CODEC_ID_PCM_S16LE* = AV_CODEC_ID_FIRST_AUDIO
  AV_CODEC_ID_DVD_SUBTITLE* = AV_CODEC_ID_FIRST_SUBTITLE
  AV_CODEC_ID_TTF* = AV_CODEC_ID_FIRST_UNKNOWN
  RAW_PACKET_BUFFER_SIZE* = 2500000
  SWR_CH_MAX* = 64
  AV_PARSER_PTS_NB* = 4
  PARSER_FLAG_COMPLETE_FRAMES* = 0x00000001
  PARSER_FLAG_ONCE* = 0x00000002
  PARSER_FLAG_FETCHED_OFFSET* = 0x00000004
  PARSER_FLAG_USE_CODEC_TS* = 0x00001000
  AV_NUM_DATA_POINTERS* = 8
  AV_OPT_FLAG_ENCODING_PARAM* = 1
  AV_OPT_FLAG_DECODING_PARAM* = 2
  AV_OPT_FLAG_AUDIO_PARAM* = 8
  AV_OPT_FLAG_VIDEO_PARAM* = 16
  AV_OPT_FLAG_SUBTITLE_PARAM* = 32
  AV_OPT_FLAG_EXPORT* = 64
  AV_OPT_FLAG_READONLY* = 128
  AV_OPT_FLAG_BSF_PARAM* = (1 shl 8) ## /< a generic parameter which can be set by the user for bit stream filtering
  AV_OPT_FLAG_RUNTIME_PARAM* = (1 shl 15) ## /< a generic parameter which can be set by the user at runtime
  AV_OPT_FLAG_FILTERING_PARAM* = (1 shl 16) ## /< a generic parameter which can be set by the user for filtering
  AV_OPT_FLAG_DEPRECATED* = (1 shl 17) ## /< set if option is deprecated, users should refer to AVOption.help text for more information
  AV_OPT_FLAG_CHILD_CONSTS* = (1 shl 18) ## /< set if option constants can also reside in child objects
  DEC* = AV_OPT_FLAG_DECODING_PARAM
  AVIO_FLAG_READ* = 1                                     
  AVIO_FLAG_WRITE* = 2 
  YUVRGB_TABLE_HEADROOM* = 512
  YUVRGB_TABLE_LUMA_HEADROOM* = 512
  SWS_MAX_FILTER_SIZE* = 256
  MAX_FILTER_SIZE* = SWS_MAX_FILTER_SIZE
  HWACCEL_CAP_ASYNC_SAFE* = (1 shl 0)
  MAX_STD_TIMEBASES* = (30 * 12 + 30 + 3 + 6)
  VAR_T* = 0
  VAR_N* = 1
  VAR_POS* = 2
  VAR_W* = 3
  VAR_H* = 4
  VAR_VARS_NB* = 5
  MAX_REORDER_DELAY* = 16
  MAX_SLICE_PLANES* = 4
  AV_NOPTS_VALUE* = 0x8000000000000000
  RAW_PACKET_SIZE* = 1024
  AVPROBE_SCORE_MAX* = 100
  AVPROBE_SCORE_RETRY* = (AVPROBE_SCORE_MAX div 4)
  AVPROBE_SCORE_STREAM_RETRY* = (AVPROBE_SCORE_MAX div 4 - 1)
  AVPROBE_SCORE_EXTENSION* = 50
  AVPROBE_SCORE_MIME* = 75
  AVPROBE_PADDING_SIZE* = 32
  AVFMT_NOFILE* = 0x00000001
  AVFMT_NEEDNUMBER* = 0x00000002
  AVFMT_SHOW_IDS* = 0x00000008
  AVFMT_GLOBALHEADER* = 0x00000040
  AVFMT_NOTIMESTAMPS* = 0x00000080
  AVFMT_GENERIC_INDEX* = 0x00000100
  AVFMT_TS_DISCONT* = 0x00000200
  AVFMT_VARIABLE_FPS* = 0x00000400
  AVFMT_NODIMENSIONS* = 0x00000800
  AVFMT_NOSTREAMS* = 0x00001000
  AVFMT_NOBINSEARCH* = 0x00002000
  AVFMT_NOGENSEARCH* = 0x00004000
  AVFMT_NO_BYTE_SEEK* = 0x00008000
  AVFMT_ALLOW_FLUSH* = 0x00010000
  AVFMT_TS_NONSTRICT* = 0x00020000
  AVFMT_TS_NEGATIVE* = 0x00040000
  AVFMT_SEEK_TO_PTS* = 0x04000000
  MAX_SPS_COUNT* = 32
  MAX_PPS_COUNT* = 256
  MAX_LOG2_MAX_FRAME_NUM* = (12 + 4)
  MB_LEN_MAX* = 5
  SHRT_MIN* = (-32768)          ##  minimum (signed) short value
  SHRT_MAX* = 32767
  USHRT_MAX* = 0x0000FFFF
  INT_MIN* = (-2147483647 - 1)    ##  minimum (signed) int value
  INT_MAX* = 2147483647
  UINT_MAX* = 0xFFFFFFFF
  LONG_MIN* = (-2147483647 - 1)   ##  minimum (signed) long value
  LONG_MAX* = 2147483647
  ULONG_MAX* = 0xFFFFFFFF
  LLONG_MAX* = 9223372036854775807'i64
  LLONG_MIN* = (-9223372036854775807'i64 - 1)
  ULLONG_MAX* = 0x0000000000000000'i64
  I8_MIN* = (-127 - 1)           ##  minimum signed 8 bit value
  I8_MAX* = 127
  UI8_MAX* = 0x000000FF
  I16_MIN* = (-32767 - 1)        ##  minimum signed 16 bit value
  I16_MAX* = 32767
  UI16_MAX* = 0x0000FFFF
  I32_MIN* = (-2147483647 - 1)   ##  minimum signed 32 bit value
  I32_MAX* = 2147483647
  UI32_MAX* = 0xFFFFFFFF
  I64_MIN* = (-9223372036854775807'i64 - 1)
  I64_MAX* = 9223372036854775807'i64
  UI64_MAX* = 0x0000000000000000'i64
  AV_INPUT_BUFFER_PADDING_SIZE* = 64
  AVERROR_BSF_NOT_FOUND* = FFERRTAG(0x000000F8, 'B', 'S', 'F') ## /< Bitstream filter not found
  AVERROR_BUG* = FFERRTAG('B', 'U', 'G', '!') ## /< Internal bug, also see AVERROR_BUG2
  AVERROR_BUFFER_TOO_SMALL* = FFERRTAG('B', 'U', 'F', 'S') ## /< Buffer too small
  AVERROR_DECODER_NOT_FOUND* = FFERRTAG(0x000000F8, 'D', 'E', 'C') ## /< Decoder not found
  AVERROR_DEMUXER_NOT_FOUND* = FFERRTAG(0x000000F8, 'D', 'E', 'M') ## /< Demuxer not found
  AVERROR_ENCODER_NOT_FOUND* = FFERRTAG(0x000000F8, 'E', 'N', 'C') ## /< Encoder not found
  AVERROR_EOF* = FFERRTAG('E', 'O', 'F', ' ') ## /< End of file
  AVERROR_EXIT* = FFERRTAG('E', 'X', 'I', 'T') ## /< Immediate exit was requested; the called function should not be restarted
  AVERROR_EXTERNAL* = FFERRTAG('E', 'X', 'T', ' ') ## /< Generic error in an external library
  AVERROR_FILTER_NOT_FOUND* = FFERRTAG(0x000000F8, 'F', 'I', 'L') ## /< Filter not found
  AVERROR_INVALIDDATA* = FFERRTAG('I', 'N', 'D', 'A') ## /< Invalid data found when processing input
  AVERROR_MUXER_NOT_FOUND* = FFERRTAG(0x000000F8, 'M', 'U', 'X') ## /< Muxer not found
  AVERROR_OPTION_NOT_FOUND* = FFERRTAG(0x000000F8, 'O', 'P', 'T') ## /< Option not found
  AVERROR_PATCHWELCOME* = FFERRTAG('P', 'A', 'W', 'E') ## /< Not yet implemented in FFmpeg, patches welcome
  AVERROR_PROTOCOL_NOT_FOUND* = FFERRTAG(0x000000F8, 'P', 'R', 'O') ## /< Protocol not found
  AVERROR_STREAM_NOT_FOUND* = FFERRTAG(0x000000F8, 'S', 'T', 'R') ## /< Stream not found
                                                            ## *
                                                            ##  This is semantically identical to AVERROR_BUG
                                                            ##  it has been introduced in Libav after our AVERROR_BUG and with a modified value.
                                                            ##
  AVERROR_BUG2* = FFERRTAG('B', 'U', 'G', ' ')
  AVERROR_UNKNOWN* = FFERRTAG('U', 'N', 'K', 'N') ## /< Unknown error, typically from an external library
  AVERROR_EXPERIMENTAL* = (-0x2BB2AFA8) ## /< Requested feature is flagged experimental. Set strict_std_compliance if you really want to use it.
  AVERROR_INPUT_CHANGED* = (-0x636E6701) ## /< Input changed between calls. Reconfiguration is required. (can be OR-ed with AVERROR_OUTPUT_CHANGED)
  AVERROR_OUTPUT_CHANGED* = (-0x636E6702) ## /< Output changed between calls. Reconfiguration is required. (can be OR-ed with AVERROR_INPUT_CHANGED)
  AVERROR_HTTP_BAD_REQUEST* = FFERRTAG(0x000000F8, '4', '0', '0')
  AVERROR_HTTP_UNAUTHORIZED* = FFERRTAG(0x000000F8, '4', '0', '1')
  AVERROR_HTTP_FORBIDDEN* = FFERRTAG(0x000000F8, '4', '0', '3')
  AVERROR_HTTP_NOT_FOUND* = FFERRTAG(0x000000F8, '4', '0', '4')
  AVERROR_HTTP_OTHER_4XX* = FFERRTAG(0x000000F8, '4', 'X', 'X')
  AVERROR_HTTP_SERVER_ERROR* = FFERRTAG(0x000000F8, '5', 'X', 'X')
  AV_ERROR_MAX_STRING_SIZE* = 64
  MB_SIZE* = 16
  X264_CPU_MMX* = (1 shl 0)
  X264_CPU_MMX2* = (1 shl 1)      ##  MMX2 aka MMXEXT aka ISSE
  X264_CPU_MMXEXT* = X264_CPU_MMX2
  X264_CPU_SSE* = (1 shl 2)
  X264_CPU_SSE2* = (1 shl 3)
  X264_CPU_LZCNT* = (1 shl 4)
  X264_CPU_SSE3* = (1 shl 5)
  X264_CPU_SSSE3* = (1 shl 6)
  X264_CPU_SSE4* = (1 shl 7)      ##  SSE4.1
  X264_CPU_SSE42* = (1 shl 8)     ##  SSE4.2
  X264_CPU_AVX* = (1 shl 9)       ##  Requires OS support even if YMM registers aren't used
  X264_CPU_XOP* = (1 shl 10)      ##  AMD XOP
  X264_CPU_FMA4* = (1 shl 11)     ##  AMD FMA4
  X264_CPU_FMA3* = (1 shl 12)
  X264_CPU_BMI1* = (1 shl 13)
  X264_CPU_BMI2* = (1 shl 14)
  X264_CPU_AVX2* = (1 shl 15)
  X264_CPU_AVX512* = (1 shl 16)   ##  AVX-512 {F, CD, BW, DQ, VL}, requires OS support
  X264_CPU_CACHELINE_32* = (1 shl 17) ##  avoid memory loads that span the border between two cachelines
  X264_CPU_CACHELINE_64* = (1 shl 18) ##  32/64 is the size of a cacheline in bytes
  X264_CPU_SSE2_IS_SLOW* = (1 shl 19) ##  avoid most SSE2 functions on Athlon64
  X264_CPU_SSE2_IS_FAST* = (1 shl 20) ##  a few functions are only faster on Core2 and Phenom
  X264_CPU_SLOW_SHUFFLE* = (1 shl 21) ##  The Conroe has a slow shuffle unit (relative to overall SSE performance)
  X264_CPU_STACK_MOD4* = (1 shl 22) ##  if stack is only mod4 and not mod16
  X264_CPU_SLOW_ATOM* = (1 shl 23) ##  The Atom is terrible: slow SSE unaligned loads, slow
                              ##  SIMD multiplies, slow SIMD variable shifts, slow pshufb,
                              ##  cacheline split penalties -- gather everything here that
                              ##  isn't shared by other CPUs to avoid making half a dozen
                              ##  new SLOW flags.
  X264_CPU_SLOW_PSHUFB* = (1 shl 24) ##  such as on the Intel Atom
  X264_CPU_SLOW_PALIGNR* = (1 shl 25) ##  such as on the AMD Bobcat
  X264_CPU_ALTIVEC* = 0x00000001
  X264_CPU_ARMV6* = 0x00000001
  X264_CPU_NEON* = 0x00000002
  X264_CPU_FAST_NEON_MRC* = 0x00000004
  X264_CPU_ARMV8* = 0x00000008
  X264_CPU_MSA* = 0x00000001
  X264_ANALYSE_I4x4* = 0x00000001
  X264_ANALYSE_I8x8* = 0x00000002
  X264_ANALYSE_PSUB16x16* = 0x00000010
  X264_ANALYSE_PSUB8x8* = 0x00000020
  X264_ANALYSE_BSUB16x16* = 0x00000100
  X264_DIRECT_PRED_NONE* = 0
  X264_DIRECT_PRED_SPATIAL* = 1
  X264_DIRECT_PRED_TEMPORAL* = 2
  X264_DIRECT_PRED_AUTO* = 3
  X264_ME_DIA* = 0
  X264_ME_HEX* = 1
  X264_ME_UMH* = 2
  X264_ME_ESA* = 3
  X264_ME_TESA* = 4
  X264_CQM_FLAT* = 0
  X264_CQM_JVT* = 1
  X264_CQM_CUSTOM* = 2
  X264_RC_CQP* = 0
  X264_RC_CRF* = 1
  X264_RC_ABR* = 2
  X264_QP_AUTO* = 0
  X264_AQ_NONE* = 0
  X264_AQ_VARIANCE* = 1
  X264_AQ_AUTOVARIANCE* = 2
  X264_AQ_AUTOVARIANCE_BIASED* = 3
  X264_B_ADAPT_NONE* = 0
  X264_B_ADAPT_FAST* = 1
  X264_B_ADAPT_TRELLIS* = 2
  X264_WEIGHTP_NONE* = 0
  X264_WEIGHTP_SIMPLE* = 1
  X264_WEIGHTP_SMART* = 2
  X264_B_PYRAMID_NONE* = 0
  X264_B_PYRAMID_STRICT* = 1
  X264_B_PYRAMID_NORMAL* = 2
  X264_KEYINT_MIN_AUTO* = 0
  X264_KEYINT_MAX_INFINITE* = (1 shl 30)
  X264_AVCINTRA_FLAVOR_PANASONIC* = 0
  X264_AVCINTRA_FLAVOR_SONY* = 1
  X264_CSP_MASK* = 0x000000FF
  X264_CSP_NONE* = 0x00000000
  X264_CSP_I400* = 0x00000001
  X264_CSP_I420* = 0x00000002
  X264_CSP_YV12* = 0x00000003
  X264_CSP_NV12* = 0x00000004
  X264_CSP_NV21* = 0x00000005
  X264_CSP_I422* = 0x00000006
  X264_CSP_YV16* = 0x00000007
  X264_CSP_NV16* = 0x00000008
  X264_CSP_YUYV* = 0x00000009
  X264_CSP_UYVY* = 0x0000000A
  X264_CSP_V210* = 0x0000000B
  X264_CSP_I444* = 0x0000000C
  X264_CSP_YV24* = 0x0000000D
  X264_CSP_BGR* = 0x0000000E
  X264_CSP_BGRA* = 0x0000000F
  X264_CSP_RGB* = 0x00000010
  X264_CSP_MAX* = 0x00000011
  X264_CSP_VFLIP* = 0x00001000
  X264_CSP_HIGH_DEPTH* = 0x00002000
  X264_TYPE_AUTO* = 0x00000000
  X264_TYPE_IDR* = 0x00000001
  X264_TYPE_I* = 0x00000002
  X264_TYPE_P* = 0x00000003
  X264_TYPE_BREF* = 0x00000004
  X264_TYPE_B* = 0x00000005
  X264_TYPE_KEYFRAME* = 0x00000006
  AV_SYNC_AUDIO_MASTER* = 0     
  AV_SYNC_VIDEO_MASTER* = 1
  AV_SYNC_EXTERNAL_CLOCK* = 2 
  AV_PIX_FMT_Y400A = AV_PIX_FMT_YA8
  AV_PIX_FMT_GRAY8A = AV_PIX_FMT_YA8
  AV_PIX_FMT_GBR24P = AV_PIX_FMT_GBRP
  AV_FRAME_CROP_UNALIGNED* = 1 shl 0
  STATE_INPUT_READY* = 0
  STATE_SETTING_UP* = 1
  STATE_GET_BUFFER* = 2
  STATE_GET_FORMAT* = 3
  STATE_SETUP_FINISHED* = 4
  AV_OPT_FLAG_IMPLICIT_KEY* = 1
  AV_BUFFERSRC_FLAG_NO_CHECK_FORMAT* = 1
  AV_BUFFERSRC_FLAG_PUSH* = 4
  AV_BUFFERSRC_FLAG_KEEP_REF* = 8
  AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX* = 0x00000001
  AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX* = 0x00000002
  AV_CODEC_HW_CONFIG_METHOD_INTERNAL* = 0x00000004
  AV_CODEC_HW_CONFIG_METHOD_AD_HOC* = 0x00000008
  AVCOL_SPC_YCOCG* = AVCOL_SPC_YCGCO
  AVCOL_PRI_SMPTEST428_1* = AVCOL_PRI_SMPTE428
  AVCOL_PRI_JEDEC_P22* = AVCOL_PRI_EBU3213
  AVCOL_TRC_SMPTEST2084* = AVCOL_TRC_SMPTE2084
  AVCOL_TRC_SMPTEST428_1* = AVCOL_TRC_SMPTE428
  MAX_THREADS* = 32
  MAX_MV* = 4096
  MAX_DMV* = (2 * MAX_MV)
  MAX_RUN* =  64
  MAX_LEVEL* =  64
  URL_SCHEME_CHARS* = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-."
  MAX_B_FRAMES* = 16
  VE* = AV_OPT_FLAG_VIDEO_PARAM or AV_OPT_FLAG_ENCODING_PARAM
  X264_THREADS_AUTO* = 0
  X264_SYNC_LOOKAHEAD_AUTO* = -1
  AV_CODEC_FLAG_UNALIGNED* = (1 shl 0)
  AV_CODEC_FLAG_QSCALE* = (1 shl 1)
  AV_CODEC_FLAG_4MV* = (1 shl 2)
  AV_CODEC_FLAG_OUTPUT_CORRUPT* = (1 shl 3)
  AV_CODEC_FLAG_QPEL* = (1 shl 4)
  AV_CODEC_FLAG_DROPCHANGED* = (1 shl 5)
  AV_CODEC_FLAG_PASS1* = (1 shl 9)
  AV_CODEC_FLAG_PASS2* = (1 shl 10)
  AV_CODEC_FLAG_LOOP_FILTER* = (1 shl 11)
  AV_CODEC_FLAG_GRAY* = (1 shl 13)
  AV_CODEC_FLAG_PSNR* = (1 shl 15)
  AV_CODEC_FLAG_TRUNCATED* = (1 shl 16)
  AV_CODEC_FLAG_INTERLACED_DCT* = (1 shl 18)
  AV_CODEC_FLAG_LOW_DELAY* = (1 shl 19)
  AV_CODEC_FLAG_GLOBAL_HEADER* = (1 shl 22)
  AV_CODEC_FLAG_BITEXACT* = (1 shl 23)
  AV_CODEC_FLAG_AC_PRED* = (1 shl 24)
  AV_CODEC_FLAG_INTERLACED_ME* = (1 shl 29)
  AV_CODEC_FLAG_CLOSED_GOP* = (1 shl 31)
  AV_CODEC_FLAG2_FAST* = (1 shl 0)
  AV_CODEC_FLAG2_NO_OUTPUT* = (1 shl 2)
  AV_CODEC_FLAG2_LOCAL_HEADER* = (1 shl 3)
  AV_CODEC_FLAG2_DROP_FRAME_TIMECODE* = (1 shl 13)
  AV_CODEC_FLAG2_CHUNKS* = (1 shl 15)
  AV_CODEC_FLAG2_IGNORE_CROP* = (1 shl 16)
  AV_CODEC_FLAG2_SHOW_ALL* = (1 shl 22)
  AV_CODEC_FLAG2_EXPORT_MVS* = (1 shl 28)
  AV_CODEC_FLAG2_SKIP_MANUAL* = (1 shl 29)
  AV_CODEC_FLAG2_RO_FLUSH_NOOP* = (1 shl 30)
  AV_CODEC_EXPORT_DATA_MVS* = (1 shl 0)
  AV_CODEC_EXPORT_DATA_PRFT* = (1 shl 1)
  AV_CODEC_EXPORT_DATA_VIDEO_ENC_PARAMS* = (1 shl 2)
  AV_PIX_FMT_RGB32* = AV_PIX_FMT_NE(ARGB, BGRA)
  AV_PIX_FMT_RGB32_1* = AV_PIX_FMT_NE(RGBA, ABGR)
  AV_PIX_FMT_BGR32* = AV_PIX_FMT_NE(ABGR, RGBA)
  AV_PIX_FMT_BGR32_1* = AV_PIX_FMT_NE(BGRA, ARGB)
  AV_PIX_FMT_0RGB32* = AV_PIX_FMT_NE(0, BGR0)
  AV_PIX_FMT_0BGR32* = AV_PIX_FMT_NE(0b00000000000000000000000000000000, RGB0)
  AV_PIX_FMT_GRAY9* = AV_PIX_FMT_NE(GRAY9BE, GRAY9LE)
  AV_PIX_FMT_GRAY10* = AV_PIX_FMT_NE(GRAY10BE, GRAY10LE)
  AV_PIX_FMT_GRAY12* = AV_PIX_FMT_NE(GRAY12BE, GRAY12LE)
  AV_PIX_FMT_GRAY14* = AV_PIX_FMT_NE(GRAY14BE, GRAY14LE)
  AV_PIX_FMT_GRAY16* = AV_PIX_FMT_NE(GRAY16BE, GRAY16LE)
  AV_PIX_FMT_YA16* = AV_PIX_FMT_NE(YA16BE, YA16LE)
  AV_PIX_FMT_RGB48* = AV_PIX_FMT_NE(RGB48BE, RGB48LE)
  AV_PIX_FMT_RGB565* = AV_PIX_FMT_NE(RGB565BE, RGB565LE)
  AV_PIX_FMT_RGB555* = AV_PIX_FMT_NE(RGB555BE, RGB555LE)
  AV_PIX_FMT_RGB444* = AV_PIX_FMT_NE(RGB444BE, RGB444LE)
  AV_PIX_FMT_RGBA64* = AV_PIX_FMT_NE(RGBA64BE, RGBA64LE)
  AV_PIX_FMT_BGR48* = AV_PIX_FMT_NE(BGR48BE, BGR48LE)
  AV_PIX_FMT_BGR565* = AV_PIX_FMT_NE(BGR565BE, BGR565LE)
  AV_PIX_FMT_BGR555* = AV_PIX_FMT_NE(BGR555BE, BGR555LE)
  AV_PIX_FMT_BGR444* = AV_PIX_FMT_NE(BGR444BE, BGR444LE)
  AV_PIX_FMT_BGRA64* = AV_PIX_FMT_NE(BGRA64BE, BGRA64LE)
  AV_PIX_FMT_YUV420P9* = AV_PIX_FMT_NE(YUV420P9BE, YUV420P9LE)
  AV_PIX_FMT_YUV422P9* = AV_PIX_FMT_NE(YUV422P9BE, YUV422P9LE)
  AV_PIX_FMT_YUV444P9* = AV_PIX_FMT_NE(YUV444P9BE, YUV444P9LE)
  AV_PIX_FMT_YUV420P10* = AV_PIX_FMT_NE(YUV420P10BE, YUV420P10LE)
  AV_PIX_FMT_YUV422P10* = AV_PIX_FMT_NE(YUV422P10BE, YUV422P10LE)
  AV_PIX_FMT_YUV440P10* = AV_PIX_FMT_NE(YUV440P10BE, YUV440P10LE)
  AV_PIX_FMT_YUV444P10* = AV_PIX_FMT_NE(YUV444P10BE, YUV444P10LE)
  AV_PIX_FMT_YUV420P12* = AV_PIX_FMT_NE(YUV420P12BE, YUV420P12LE)
  AV_PIX_FMT_YUV422P12* = AV_PIX_FMT_NE(YUV422P12BE, YUV422P12LE)
  AV_PIX_FMT_YUV440P12* = AV_PIX_FMT_NE(YUV440P12BE, YUV440P12LE)
  AV_PIX_FMT_YUV444P12* = AV_PIX_FMT_NE(YUV444P12BE, YUV444P12LE)
  AV_PIX_FMT_YUV420P14* = AV_PIX_FMT_NE(YUV420P14BE, YUV420P14LE)
  AV_PIX_FMT_YUV422P14* = AV_PIX_FMT_NE(YUV422P14BE, YUV422P14LE)
  AV_PIX_FMT_YUV444P14* = AV_PIX_FMT_NE(YUV444P14BE, YUV444P14LE)
  AV_PIX_FMT_YUV420P16* = AV_PIX_FMT_NE(YUV420P16BE, YUV420P16LE)
  AV_PIX_FMT_YUV422P16* = AV_PIX_FMT_NE(YUV422P16BE, YUV422P16LE)
  AV_PIX_FMT_YUV444P16* = AV_PIX_FMT_NE(YUV444P16BE, YUV444P16LE)
  AV_PIX_FMT_GBRP9* = AV_PIX_FMT_NE(GBRP9BE, GBRP9LE)
  AV_PIX_FMT_GBRP10* = AV_PIX_FMT_NE(GBRP10BE, GBRP10LE)
  AV_PIX_FMT_GBRP12* = AV_PIX_FMT_NE(GBRP12BE, GBRP12LE)
  AV_PIX_FMT_GBRP14* = AV_PIX_FMT_NE(GBRP14BE, GBRP14LE)
  AV_PIX_FMT_GBRP16* = AV_PIX_FMT_NE(GBRP16BE, GBRP16LE)
  AV_PIX_FMT_GBRAP10* = AV_PIX_FMT_NE(GBRAP10BE, GBRAP10LE)
  AV_PIX_FMT_GBRAP12* = AV_PIX_FMT_NE(GBRAP12BE, GBRAP12LE)
  AV_PIX_FMT_GBRAP16* = AV_PIX_FMT_NE(GBRAP16BE, GBRAP16LE)
  AV_PIX_FMT_BAYER_BGGR16* = AV_PIX_FMT_NE(BAYER_BGGR16BE, BAYER_BGGR16LE)
  AV_PIX_FMT_BAYER_RGGB16* = AV_PIX_FMT_NE(BAYER_RGGB16BE, BAYER_RGGB16LE)
  AV_PIX_FMT_BAYER_GBRG16* = AV_PIX_FMT_NE(BAYER_GBRG16BE, BAYER_GBRG16LE)
  AV_PIX_FMT_BAYER_GRBG16* = AV_PIX_FMT_NE(BAYER_GRBG16BE, BAYER_GRBG16LE)
  AV_PIX_FMT_GBRPF32* = AV_PIX_FMT_NE(GBRPF32BE, GBRPF32LE)
  AV_PIX_FMT_GBRAPF32* = AV_PIX_FMT_NE(GBRAPF32BE, GBRAPF32LE)
  AV_PIX_FMT_GRAYF32* = AV_PIX_FMT_NE(GRAYF32BE, GRAYF32LE)
  AV_PIX_FMT_YUVA420P9* = AV_PIX_FMT_NE(YUVA420P9BE, YUVA420P9LE)
  AV_PIX_FMT_YUVA422P9* = AV_PIX_FMT_NE(YUVA422P9BE, YUVA422P9LE)
  AV_PIX_FMT_YUVA444P9* = AV_PIX_FMT_NE(YUVA444P9BE, YUVA444P9LE)
  AV_PIX_FMT_YUVA420P10* = AV_PIX_FMT_NE(YUVA420P10BE, YUVA420P10LE)
  AV_PIX_FMT_YUVA422P10* = AV_PIX_FMT_NE(YUVA422P10BE, YUVA422P10LE)
  AV_PIX_FMT_YUVA444P10* = AV_PIX_FMT_NE(YUVA444P10BE, YUVA444P10LE)
  AV_PIX_FMT_YUVA422P12* = AV_PIX_FMT_NE(YUVA422P12BE, YUVA422P12LE)
  AV_PIX_FMT_YUVA444P12* = AV_PIX_FMT_NE(YUVA444P12BE, YUVA444P12LE)
  AV_PIX_FMT_YUVA420P16* = AV_PIX_FMT_NE(YUVA420P16BE, YUVA420P16LE)
  AV_PIX_FMT_YUVA422P16* = AV_PIX_FMT_NE(YUVA422P16BE, YUVA422P16LE)
  AV_PIX_FMT_YUVA444P16* = AV_PIX_FMT_NE(YUVA444P16BE, YUVA444P16LE)
  AV_PIX_FMT_XYZ12* = AV_PIX_FMT_NE(XYZ12BE, XYZ12LE)
  AV_PIX_FMT_NV20* = AV_PIX_FMT_NE(NV20BE, NV20LE)
  AV_PIX_FMT_AYUV64* = AV_PIX_FMT_NE(AYUV64BE, AYUV64LE)
  AV_PIX_FMT_P010* = AV_PIX_FMT_NE(P010BE, P010LE)
  AV_PIX_FMT_P016* = AV_PIX_FMT_NE(P016BE, P016LE)
  AV_PIX_FMT_Y210* = AV_PIX_FMT_NE(Y210BE, Y210LE)
  AV_PIX_FMT_X2RGB10* = AV_PIX_FMT_NE(X2RGB10BE, X2RGB10LE)
  AV_PIX_FMT_FLAG_BE* = (1 shl 0)
  AV_PIX_FMT_FLAG_PAL* = (1 shl 1)
  AV_PIX_FMT_FLAG_BITSTREAM* = (1 shl 2)
  AV_PIX_FMT_FLAG_HWACCEL* = (1 shl 3)
  AV_PIX_FMT_FLAG_PLANAR* = (1 shl 4)
  AV_PIX_FMT_FLAG_RGB* = (1 shl 5)
  X264_PARAM_BAD_NAME* = (-1)
  X264_PARAM_BAD_VALUE* = (-2)
  X264_PARAM_ALLOC_FAILED* = (-3)
  FF_CMP_CHROMA* = 256
  FF_PROFILE_H264_CONSTRAINED* = (1 shl 9) ##  8+1; constraint_set1_flag
  FF_PROFILE_H264_INTRA* = (1 shl 11) ##  8+3; constraint_set3_flag
  FF_PROFILE_H264_BASELINE* = 66
  FF_PROFILE_H264_CONSTRAINED_BASELINE* = (66 or FF_PROFILE_H264_CONSTRAINED)
  FF_PROFILE_H264_MAIN* = 77
  FF_PROFILE_H264_EXTENDED* = 88
  FF_PROFILE_H264_HIGH* = 100
  FF_PROFILE_H264_HIGH_10* = 110
  FF_PROFILE_H264_HIGH_10_INTRA* = (110 or FF_PROFILE_H264_INTRA)
  FF_PROFILE_H264_MULTIVIEW_HIGH* = 118
  FF_PROFILE_H264_HIGH_422* = 122
  FF_PROFILE_H264_HIGH_422_INTRA* = (122 or FF_PROFILE_H264_INTRA)
  FF_PROFILE_H264_STEREO_HIGH* = 128
  FF_PROFILE_H264_HIGH_444* = 144
  FF_PROFILE_H264_HIGH_444_PREDICTIVE* = 244
  FF_PROFILE_H264_HIGH_444_INTRA* = (244 or FF_PROFILE_H264_INTRA)
  FF_PROFILE_H264_CAVLC_444* = 44
  FF_THREAD_FRAME* = 1
  FF_THREAD_SLICE* = 2
  FF_LEVEL_UNKNOWN* = -99
  FF_SUB_CHARENC_MODE_DO_NOTHING* = -1
  FF_SUB_CHARENC_MODE_AUTOMATIC* = 0
  FF_SUB_CHARENC_MODE_PRE_DECODER* = 1
  FF_SUB_CHARENC_MODE_IGNORE* = 2
  FF_CODEC_PROPERTY_LOSSLESS* = 0x00000001
  FF_CODEC_PROPERTY_CLOSED_CAPTIONS* = 0x00000002
  FF_SUB_TEXT_FMT_ASS* = 0


var program_name*: string = "ffplay"

var var_names*: array[6, string] = ["t", "n", "pos", "w", "h", ""]

type
  idct_permutation_type* = enum
    FF_IDCT_PERM_NONE, FF_IDCT_PERM_LIBMPEG2, FF_IDCT_PERM_SIMPLE,
    FF_IDCT_PERM_TRANSPOSE, FF_IDCT_PERM_PARTTRANS, FF_IDCT_PERM_SSE2
  AVStereo3DType* = enum
    AV_STEREO3D_2D, AV_STEREO3D_SIDEBYSIDE, AV_STEREO3D_TOPBOTTOM,
    AV_STEREO3D_FRAMESEQUENCE, AV_STEREO3D_CHECKERBOARD,
    AV_STEREO3D_SIDEBYSIDE_QUINCUNX, AV_STEREO3D_LINES, AV_STEREO3D_COLUMNS
  AVPictureStructure* = enum
    AV_PICTURE_STRUCTURE_UNKNOWN, 
    AV_PICTURE_STRUCTURE_TOP_FIELD, 
    AV_PICTURE_STRUCTURE_BOTTOM_FIELD, 
    AV_PICTURE_STRUCTURE_FRAME 
  AVStereo3DView* = enum
    AV_STEREO3D_VIEW_PACKED, AV_STEREO3D_VIEW_LEFT, AV_STEREO3D_VIEW_RIGHT
  fft_permutation_type* = enum
    FF_FFT_PERM_DEFAULT, FF_FFT_PERM_SWAP_LSBS, FF_FFT_PERM_AVX
  mdct_permutation_type* = enum
    FF_MDCT_PERM_NONE, FF_MDCT_PERM_INTERLEAVE
  H264_SEI_Type* = enum
    H264_SEI_TYPE_BUFFERING_PERIOD = 0, 
    H264_SEI_TYPE_PIC_TIMING = 1, 
    H264_SEI_TYPE_PAN_SCAN_RECT = 2, 
    H264_SEI_TYPE_FILLER_PAYLOAD = 3, 
    H264_SEI_TYPE_USER_DATA_REGISTERED = 4, 
    H264_SEI_TYPE_USER_DATA_UNREGISTERED = 5, 
    H264_SEI_TYPE_RECOVERY_POINT = 6,
    H264_SEI_TYPE_FRAME_PACKING = 45, 
    H264_SEI_TYPE_DISPLAY_ORIENTATION = 47, 
    H264_SEI_TYPE_GREEN_METADATA = 56, 
    H264_SEI_TYPE_MASTERING_DISPLAY_COLOUR_VOLUME = 137, 
    H264_SEI_TYPE_ALTERNATIVE_TRANSFER = 147 
  H264_SEI_PicStructType* = enum
    H264_SEI_PIC_STRUCT_FRAME = 0, 
    H264_SEI_PIC_STRUCT_TOP_FIELD = 1, 
    H264_SEI_PIC_STRUCT_BOTTOM_FIELD = 2, 
    H264_SEI_PIC_STRUCT_TOP_BOTTOM = 3, 
    H264_SEI_PIC_STRUCT_BOTTOM_TOP = 4, 
    H264_SEI_PIC_STRUCT_TOP_BOTTOM_TOP = 5, 
    H264_SEI_PIC_STRUCT_BOTTOM_TOP_BOTTOM = 6, 
    H264_SEI_PIC_STRUCT_FRAME_DOUBLING = 7, 
    H264_SEI_PIC_STRUCT_FRAME_TRIPLING = 8
  H264_SEI_FpaType* = enum
    H264_SEI_FPA_TYPE_CHECKERBOARD = 0, H264_SEI_FPA_TYPE_INTERLEAVE_COLUMN = 1,
    H264_SEI_FPA_TYPE_INTERLEAVE_ROW = 2, H264_SEI_FPA_TYPE_SIDE_BY_SIDE = 3,
    H264_SEI_FPA_TYPE_TOP_BOTTOM = 4, H264_SEI_FPA_TYPE_INTERLEAVE_TEMPORAL = 5,
    H264_SEI_FPA_TYPE_2D = 6
  ID3v2Encoding* = enum
    ID3v2_ENCODING_ISO8859 = 0, ID3v2_ENCODING_UTF16BOM = 1,
    ID3v2_ENCODING_UTF16BE = 2, ID3v2_ENCODING_UTF8 = 3
  AVEscapeMode* = enum
    AV_ESCAPE_MODE_AUTO,      
    AV_ESCAPE_MODE_BACKSLASH, 
    AV_ESCAPE_MODE_QUOTE      
  AVPacketSideDataType* = enum
    AV_PKT_DATA_PALETTE, AV_PKT_DATA_NEW_EXTRADATA, AV_PKT_DATA_PARAM_CHANGE,
    AV_PKT_DATA_H263_MB_INFO, AV_PKT_DATA_REPLAYGAIN, AV_PKT_DATA_DISPLAYMATRIX,
    AV_PKT_DATA_STEREO3D, AV_PKT_DATA_AUDIO_SERVICE_TYPE,
    AV_PKT_DATA_QUALITY_STATS, AV_PKT_DATA_FALLBACK_TRACK,
    AV_PKT_DATA_CPB_PROPERTIES, AV_PKT_DATA_SKIP_SAMPLES, AV_PKT_DATA_JP_DUALMONO,
    AV_PKT_DATA_STRINGS_METADATA, AV_PKT_DATA_SUBTITLE_POSITION,
    AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL, AV_PKT_DATA_WEBVTT_IDENTIFIER,
    AV_PKT_DATA_WEBVTT_SETTINGS, AV_PKT_DATA_METADATA_UPDATE,
    AV_PKT_DATA_MPEGTS_STREAM_ID, AV_PKT_DATA_MASTERING_DISPLAY_METADATA,
    AV_PKT_DATA_SPHERICAL, AV_PKT_DATA_CONTENT_LIGHT_LEVEL, AV_PKT_DATA_A53_CC,
    AV_PKT_DATA_ENCRYPTION_INIT_INFO, AV_PKT_DATA_ENCRYPTION_INFO,
    AV_PKT_DATA_AFD, AV_PKT_DATA_PRFT, AV_PKT_DATA_ICC_PROFILE,
    AV_PKT_DATA_DOVI_CONF, AV_PKT_DATA_S12M_TIMECODE, AV_PKT_DATA_NB
  AVSideDataParamChangeFlags* = enum
    AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT = 0x00000001,
    AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT = 0x00000002,
    AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE = 0x00000004,
    AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS = 0x00000008
  AudioObjectType* = enum
    AOT_NULL,                
    AOT_AAC_MAIN,             
    AOT_AAC_LC,               
    AOT_AAC_SSR,              
    AOT_AAC_LTP,              
    AOT_SBR,                 
    AOT_AAC_SCALABLE,         
    AOT_TWINVQ,              
    AOT_CELP,                 
    AOT_HVXC,                 
    AOT_TTSI = 12,             
    AOT_MAINSYNTH,            
    AOT_WAVESYNTH,            
    AOT_MIDI,                 
    AOT_SAFX,                
    AOT_ER_AAC_LC,            
    AOT_ER_AAC_LTP = 19,        
    AOT_ER_AAC_SCALABLE,      
    AOT_ER_TWINVQ,            
    AOT_ER_BSAC,             
    AOT_ER_AAC_LD,            
    AOT_ER_CELP,              
    AOT_ER_HVXC,              
    AOT_ER_HILN,              
    AOT_ER_PARAM,             
    AOT_SSC,                  
    AOT_PS,                   
    AOT_SURROUND,             
    AOT_ESCAPE,               
    AOT_L1,                   
    AOT_L2,                   
    AOT_L3,                   
    AOT_DST,                  
    AOT_ALS,                 
    AOT_SLS,                  
    AOT_SLS_NON_CORE,         
    AOT_ER_AAC_ELD,           
    AOT_SMR_SIMPLE,           
    AOT_SMR_MAIN,             
    AOT_USAC_NOSBR,           
    AOT_SAOC,                 
    AOT_LD_SURROUND,          
    AOT_USAC                  
  BenchAction* = enum
    ACTION_START, ACTION_STOP, NB_ACTION
  show_muxdemuxers* = enum
    SHOW_DEFAULT, SHOW_DEMUXERS, SHOW_MUXERS
  memory_order* = enum
    memory_order_relaxed, memory_order_consume, memory_order_acquire,
    memory_order_release, memory_order_acq_rel, memory_order_seq_cst
  SwsDither* = enum
    SWS_DITHER_NONE = 0, SWS_DITHER_AUTO, SWS_DITHER_BAYER, SWS_DITHER_ED,
    SWS_DITHER_A_DITHER, SWS_DITHER_X_DITHER, NB_SWS_DITHER
  SwsAlphaBlend* = enum
    SWS_ALPHA_BLEND_NONE = 0, SWS_ALPHA_BLEND_UNIFORM, SWS_ALPHA_BLEND_CHECKERBOARD,
    SWS_ALPHA_BLEND_NB
  AVRounding* = enum
    AV_ROUND_ZERO = 0,         
    AV_ROUND_INF = 1,           
    AV_ROUND_DOWN = 2,          
    AV_ROUND_UP = 3,            
    AV_ROUND_NEAR_INF = 5,      
    AV_ROUND_PASS_MINMAX = 8192
  AVColorRange* = enum
    AVCOL_RANGE_UNSPECIFIED = 0, AVCOL_RANGE_MPEG = 1, 
    AVCOL_RANGE_JPEG = 2,       
    AVCOL_RANGE_NB           
            

  AVChromaLocation* = enum
    AVCHROMA_LOC_UNSPECIFIED = 0, AVCHROMA_LOC_LEFT = 1, 
    AVCHROMA_LOC_CENTER = 2,    
    AVCHROMA_LOC_TOPLEFT = 3,   
    AVCHROMA_LOC_TOP = 4, AVCHROMA_LOC_BOTTOMLEFT = 5, AVCHROMA_LOC_BOTTOM = 6, AVCHROMA_LOC_NB 
  AVSampleFormat* = enum
    AV_SAMPLE_FMT_NONE = -1, AV_SAMPLE_FMT_U8, 
    AV_SAMPLE_FMT_S16,        
    AV_SAMPLE_FMT_S32,        
    AV_SAMPLE_FMT_FLT,        
    AV_SAMPLE_FMT_DBL,       
    AV_SAMPLE_FMT_U8P,        
    AV_SAMPLE_FMT_S16P,      
    AV_SAMPLE_FMT_S32P,       
    AV_SAMPLE_FMT_FLTP,       
    AV_SAMPLE_FMT_DBLP,       
    AV_SAMPLE_FMT_S64,        
    AV_SAMPLE_FMT_S64P,       
    AV_SAMPLE_FMT_NB          
  AVDiscard* = enum 
    AVDISCARD_NONE = -16,       
    AVDISCARD_DEFAULT = 0,      
    AVDISCARD_NONREF = 8,       
    AVDISCARD_BIDIR = 16,       
    AVDISCARD_NONINTRA = 24,    
    AVDISCARD_NONKEY = 32,      
    AVDISCARD_ALL = 48          
  AVHWDeviceType* = enum
    AV_HWDEVICE_TYPE_NONE, AV_HWDEVICE_TYPE_VDPAU, AV_HWDEVICE_TYPE_CUDA,
    AV_HWDEVICE_TYPE_VAAPI, AV_HWDEVICE_TYPE_DXVA2, AV_HWDEVICE_TYPE_QSV,
    AV_HWDEVICE_TYPE_VIDEOTOOLBOX, AV_HWDEVICE_TYPE_D3D11VA, AV_HWDEVICE_TYPE_DRM,
    AV_HWDEVICE_TYPE_OPENCL, AV_HWDEVICE_TYPE_MEDIACODEC
  AVFrameSideDataType* = enum
    AV_FRAME_DATA_PANSCAN, AV_FRAME_DATA_A53_CC, AV_FRAME_DATA_STEREO3D,
    AV_FRAME_DATA_MATRIXENCODING, AV_FRAME_DATA_DOWNMIX_INFO,
    AV_FRAME_DATA_REPLAYGAIN, AV_FRAME_DATA_DISPLAYMATRIX, AV_FRAME_DATA_AFD,
    AV_FRAME_DATA_MOTION_VECTORS, AV_FRAME_DATA_SKIP_SAMPLES,
    AV_FRAME_DATA_AUDIO_SERVICE_TYPE, AV_FRAME_DATA_MASTERING_DISPLAY_METADATA,
    AV_FRAME_DATA_GOP_TIMECODE, AV_FRAME_DATA_SPHERICAL,
    AV_FRAME_DATA_CONTENT_LIGHT_LEVEL, AV_FRAME_DATA_ICC_PROFILE, 
    AV_FRAME_DATA_QP_TABLE_PROPERTIES, AV_FRAME_DATA_QP_TABLE_DATA, 
    AV_FRAME_DATA_S12M_TIMECODE, AV_FRAME_DATA_DYNAMIC_HDR_PLUS,
    AV_FRAME_DATA_REGIONS_OF_INTEREST, AV_FRAME_DATA_VIDEO_ENC_PARAMS,
    AV_FRAME_DATA_SEI_UNREGISTERED
  AVPictureType* = enum
    AV_PICTURE_TYPE_NONE = 0,   
    AV_PICTURE_TYPE_I,        
    AV_PICTURE_TYPE_P,        
    AV_PICTURE_TYPE_B,        
    AV_PICTURE_TYPE_S,       
    AV_PICTURE_TYPE_SI,       
    AV_PICTURE_TYPE_SP,       
    AV_PICTURE_TYPE_BI        
  RDFTransformType* = enum
    DFT_R2C, IDFT_C2R, IDFT_R2C, DFT_C2R
  AVSubtitleType* = enum
    SUBTITLE_NONE, SUBTITLE_BITMAP, 
    SUBTITLE_TEXT, SUBTITLE_ASS
  AVClassCategory* = enum
    AV_CLASS_CATEGORY_NA = 0, AV_CLASS_CATEGORY_INPUT, AV_CLASS_CATEGORY_OUTPUT,
    AV_CLASS_CATEGORY_MUXER, AV_CLASS_CATEGORY_DEMUXER, AV_CLASS_CATEGORY_ENCODER,
    AV_CLASS_CATEGORY_DECODER, AV_CLASS_CATEGORY_FILTER,
    AV_CLASS_CATEGORY_BITSTREAM_FILTER, AV_CLASS_CATEGORY_SWSCALER,
    AV_CLASS_CATEGORY_SWRESAMPLER, AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT = 40,
    AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT, AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT,
    AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT, AV_CLASS_CATEGORY_DEVICE_OUTPUT,
    AV_CLASS_CATEGORY_DEVICE_INPUT, AV_CLASS_CATEGORY_NB 
  AVOptionType* = enum
    AV_OPT_TYPE_FLAGS, AV_OPT_TYPE_INT, AV_OPT_TYPE_INT64, AV_OPT_TYPE_DOUBLE,
    AV_OPT_TYPE_FLOAT, AV_OPT_TYPE_STRING, AV_OPT_TYPE_RATIONAL, AV_OPT_TYPE_BINARY, 
    AV_OPT_TYPE_DICT, AV_OPT_TYPE_UINT64, AV_OPT_TYPE_CONST, AV_OPT_TYPE_IMAGE_SIZE, 
    AV_OPT_TYPE_PIXEL_FMT, AV_OPT_TYPE_SAMPLE_FMT, AV_OPT_TYPE_VIDEO_RATE, 
    AV_OPT_TYPE_DURATION, AV_OPT_TYPE_COLOR, AV_OPT_TYPE_CHANNEL_LAYOUT,
    AV_OPT_TYPE_BOOL
  AVMediaType* = enum
    AVMEDIA_TYPE_UNKNOWN = -1,  
    AVMEDIA_TYPE_VIDEO, AVMEDIA_TYPE_AUDIO, AVMEDIA_TYPE_DATA, 
    AVMEDIA_TYPE_SUBTITLE, AVMEDIA_TYPE_ATTACHMENT, 
    AVMEDIA_TYPE_NB
  
  AVDurationEstimationMethod* = enum
    AVFMT_DURATION_FROM_PTS,  
    AVFMT_DURATION_FROM_STREAM, 
    AVFMT_DURATION_FROM_BITRATE 
  AVFieldOrder* = enum
    AV_FIELD_UNKNOWN, AV_FIELD_PROGRESSIVE, AV_FIELD_TT, 
    AV_FIELD_BB,             
    AV_FIELD_TB,              
    AV_FIELD_BT               
  AVAudioServiceType* = enum
    AV_AUDIO_SERVICE_TYPE_MAIN = 0, AV_AUDIO_SERVICE_TYPE_EFFECTS = 1,
    AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED = 2,
    AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED = 3, AV_AUDIO_SERVICE_TYPE_DIALOGUE = 4,
    AV_AUDIO_SERVICE_TYPE_COMMENTARY = 5, AV_AUDIO_SERVICE_TYPE_EMERGENCY = 6,
    AV_AUDIO_SERVICE_TYPE_VOICE_OVER = 7, AV_AUDIO_SERVICE_TYPE_KARAOKE = 8, AV_AUDIO_SERVICE_TYPE_NB 
  ShowMode* = enum
    SHOW_MODE_NONE = -1, SHOW_MODE_VIDEO = 0, SHOW_MODE_WAVES, SHOW_MODE_RDFT,
    SHOW_MODE_NB
  AVIODataMarkerType* = enum
    AVIO_DATA_MARKER_HEADER, AVIO_DATA_MARKER_SYNC_POINT,
    AVIO_DATA_MARKER_BOUNDARY_POINT, AVIO_DATA_MARKER_UNKNOWN,
    AVIO_DATA_MARKER_TRAILER, AVIO_DATA_MARKER_FLUSH_POINT
  AVStreamParseType* = enum
    AVSTREAM_PARSE_NONE, AVSTREAM_PARSE_FULL, 
    AVSTREAM_PARSE_HEADERS,  
    AVSTREAM_PARSE_TIMESTAMPS, 
    AVSTREAM_PARSE_FULL_ONCE, 
    AVSTREAM_PARSE_FULL_RAW                                           
  SwrDitherType* = enum
    SWR_DITHER_NONE = 0, SWR_DITHER_RECTANGULAR, SWR_DITHER_TRIANGULAR,
    SWR_DITHER_TRIANGULAR_HIGHPASS, SWR_DITHER_NS = 64, 
    SWR_DITHER_NS_LIPSHITZ, SWR_DITHER_NS_F_WEIGHTED,
    SWR_DITHER_NS_MODIFIED_E_WEIGHTED, SWR_DITHER_NS_IMPROVED_E_WEIGHTED,
    SWR_DITHER_NS_SHIBATA, SWR_DITHER_NS_LOW_SHIBATA, SWR_DITHER_NS_HIGH_SHIBATA, SWR_DITHER_NB
  SwrEngine* = enum
    SWR_ENGINE_SWR,          
    SWR_ENGINE_SOXR,      
    SWR_ENGINE_NB        
  SwrFilterType* = enum
    SWR_FILTER_TYPE_CUBIC,    
    SWR_FILTER_TYPE_BLACKMAN_NUTTALL, 
    SWR_FILTER_TYPE_KAISER    
  OutputFormat* = enum
    FMT_MPEG1, FMT_H261, FMT_H263, FMT_MJPEG